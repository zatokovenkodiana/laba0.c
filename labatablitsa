1.
def calculate_expression(A, B, C):
    return int(not (A or B) or (A and C))

def print_truth_table():
    print("A\tB\tC\tF")
    for A in [0, 1]:
        for B in [0, 1]:
            for C in [0, 1]:
                F = calculate_expression(A, B, C)
                print(f"{A}\t{B}\t{C}\t{F}")

def get_SDNF(truth_table):
    SDNF_terms = []
    for key, value in truth_table.items():
        if value == 1:
            term = ""
            if key[0] == 0:
                term += "¬A"
            else:
                term += "A"
            if key[1] == 0:
                term += "∨¬B"
            else:
                term += "∨B"
            if key[2] == 0:
                term += "∨¬C"
            else:
                term += "∨C"
            SDNF_terms.append(term)
    SDNF = "∧".join(SDNF_terms)
    return SDNF

truth_table = {}
for A in [0, 1]:
    for B in [0, 1]:
        for C in [0, 1]:
            F = calculate_expression(A, B, C)
            truth_table[(A, B, C)] = F

print_truth_table()
SDNF = get_SDNF(truth_table)
print("\nСДНФ для выражения F = ¬(A∨B→AC) :")
print(SDNF)

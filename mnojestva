1. Задание 1.
Ввести
множества А и В,
бинарные отношения R, Q.
Вывести матрицу каждого бинарного отношения R^-1, Q^-1, их объединения, пересечения, разности и суперпозиции R ○ Q


Ввод с клавиатуры
# Функция для построения обратного отношения
def inverse_relation(rel):
    return [(y, x) for (x, y) in rel]

# Функция для выполнения операций с бинарными отношениями
def main():
    # Ввод множеств с клавиатуры
    A = set(map(int, input("Введите элементы множества A через пробел: ").split()))
    B = set(map(int, input("Введите элементы множества B через пробел: ").split()))
    
    # Ввод бинарных отношений с клавиатуры
    R = [tuple(map(int, input("Введите элементы бинарного отношения R (через пробел): ").split())) for _ in range(int(input("Введите количество элементов в бинарном отношении R: ")))]
    Q = [tuple(map(int, input("Введите элементы бинарного отношения Q (через пробел): ").split())) for _ in range(int(input("Введите количество элементов в бинарном отношении Q: ")))]
    
    # Построение обратных отношений
    R_inverse = inverse_relation(R)
    Q_inverse = inverse_relation(Q)
    
    # Выведем результаты 
    print("Обратное отношение R:", R_inverse)
    print("Обратное отношение Q:", Q_inverse)
    print("Объединение R и Q:", R + Q) # Объединение
    print("Пересечение R и Q:", [pair for pair in R if pair in Q]) # Пересечение
    print("Разность R и Q:", [pair for pair in R if pair not in Q]) # Разность

main()



Ввод не с клавиатуры
# Пример множеств
A = {1, 2, 3}
B = {4, 5, 6}

# Пример бинарных отношений R и Q в виде списков упорядоченных пар
R = [(1, 4), (2, 5), (3, 6)]
Q = [(4, 5), (5, 6), (6, 4)]

# Функция для построения обратного отношения
def inverse_relation(rel):
    return [(y, x) for (x, y) in rel]

# Функция для выполнения операций с бинарными отношениями
def main():
    R_inverse = inverse_relation(R)
    Q_inverse = inverse_relation(Q)
    
    # Выведем результаты 
    print("Обратное отношение R:", R_inverse)
    print("Обратное отношение Q:", Q_inverse)
    print("Объединение R и Q:", R + Q) # Объединение
    print("Пересечение R и Q:", [pair for pair in R if pair in Q]) # Пересечение
    print("Разность R и Q:", [pair for pair in R if pair not in Q]) # Разность

main()
______________________________________________________________________________________
2. Задание 2.
Ввести множество чисел М ={1,2,3,4,5,6,7,8,9,10}
задать число Z в пределах от 0 до 9. 
Составить матрицы отношений R1, R2, R3⊆M*M, если R1 - «быть остатком от деления на Z», R2 - «в сумме давать 9», R3 - «произведение должно быть больше7».
Вывести матрицы R1, R2, R3

def compute_relation_R1(M, Z):
    R1 = [[int(M[j] % Z == M[i]) for j in range(len(M))] for i in range(len(M))]
    return R1

def compute_relation_R2(M):
    R2 = [[int(M[i] + M[j] == 9) for j in range(len(M))] for i in range(len(M))]
    return R2

def compute_relation_R3(M):
    R3 = [[int(M[i] * M[j] > 7) for j in range(len(M))] for i in range(len(M))]
    return R3

def print_matrix(R):
    for row in R:
        print(' '.join(map(str, row)))

def main():
    M = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    Z = int(input("Введите число Z в пределах от 0 до 9: "))

    R1 = compute_relation_R1(M, Z)
    R2 = compute_relation_R2(M)
    R3 = compute_relation_R3(M)

    print("Матрица R1:")
    print_matrix(R1)

    print("\nМатрица R2:")
    print_matrix(R2)

    print("\nМатрица R3:")
    print_matrix(R3)

main()
__________________________________________________________________________________________________
3. Задание 3.
Ввести множество чисел N ={1,2,3,4,5,6…}составить матрицу бинарного отношения R на N^2 со свойствами рефлексивности и симметрии.
Вывести элементы (пары) бинарного отношения согласно составленной матрице

Без вывода матрицы

def reflexive_symmetric_relation(N):
    relation = set()
    for i in range(1, N+1):
        relation.add((i, i))  # добавляем пары, удовлетворяющие свойству рефлексивности
        for j in range(1, N+1):
            if i != j:
                relation.add((i, j))
                relation.add((j, i))  # добавляем пары, чтобы удовлетворить свойству симметрии
    return relation

def print_relation(relation):
    for pair in relation:
        print(pair)

def main():
    N = 6  # Можно заменить на любое другое число
    relation = reflexive_symmetric_relation(N)
    print_relation(relation)

main()

С выводом матрицы

def generate_reflexive_symmetric_relation_matrix(N):
    matrix = [[0 for _ in range(N)] for _ in range(N)]
    for i in range(N):
        matrix[i][i] = 1  # Устанавливаем 1 на главной диагонали для рефлексивности
        for j in range(i+1, N):
            matrix[i][j] = 1  # Устанавливаем 1 вне главной диагонали для симметрии
            matrix[j][i] = 1  # Матрица симметрична относительно главной диагонали
    return matrix

def print_matrix(matrix):
    for row in matrix:
        print(row)

def relation_pairs_from_matrix(matrix):
    pairs = []
    for i in range(len(matrix)):
        for j in range(len(matrix[i])):
            if matrix[i][j] == 1:
                pairs.append((i+1, j+1))
    return pairs

def main():
    N = 6  # Множество чисел {1, 2, 3, 4, 5, 6, ...}
    matrix = generate_reflexive_symmetric_relation_matrix(N)
    print("Матрица бинарного отношения:")
    print_matrix(matrix)
    print("Элементы (пары) бинарного отношения:")
    print(relation_pairs_from_matrix(matrix))

main()
